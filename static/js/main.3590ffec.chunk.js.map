{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Paper","props","react_default","a","createElement","className","id","title","content","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggleShow","state","isClickMenu","backToTop","setState","show","perpageChange","e","allPage","fullVal","length","parseInt","target","value","edPage","perpage","stPage","reload","isSelected","fillVal","perPageNo","pageNo","loading","topBut","React","createRef","nextPage","bind","assertThisInitialized","prevPage","lastPage","firstPage","_this2","setTimeout","_this3","Axios","get","then","res","data","filter","stopLoading","console","log","allpage","setEd","document","body","scrollTop","documentElement","_this4","react","style","width","height","react_loading_default","type","color","onClick","onChange","map","key","selected","App_Paper","float","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3590ffec.chunk.js","sourcesContent":["import React, { Component,Fragment } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Loader from 'react-loading';\nimport './App.css';\nimport Axios from 'axios';\n\nconst Paper = (props) => {\n  return(\n    <span className=\"bg-light col-sm col-lg-8 shadow paper\">\n    <p className=\"d-flex\"><small>({props.id})</small> {props.title}</p>\n    <p><small>{props.content}</small></p>\n    </span>\n  )\n}\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.state = {\n      isClickMenu: true,\n      show: false,\n      fullVal: [],\n      fillVal: [],\n      perPageNo: [5,10,15,25,50],\n      pageNo : null,\n      perpage : 5,\n      stPage: 0,\n      edPage: 0,\n      loading: true\n    }\n    this.topBut = React.createRef;\n    this.nextPage = this.nextPage.bind(this);\n    this.prevPage = this.prevPage.bind(this);\n    this.lastPage = this.lastPage.bind(this);\n    this.firstPage = this.firstPage.bind(this);\n    this.isSelected = this.isSelected.bind(this);\n  }\n\n  toggleShow = () => {\n    if(this.state.isClickMenu){\n      this.backToTop();\n    }\n    this.setState(\n      {\n        show:!this.state.show,\n        isClickMenu:!this.state.isClickMenu\n      }\n    );\n  }\n  stopLoading(){\n    setTimeout(() => {\n      this.setState({loading:false})\n    },850);\n  };\n\n  reload(){\n    Axios.get('https://jsonplaceholder.typicode.com/posts').then(\n      res => {\n        this.setState({fullVal:res.data,loading:true});\n      }\n    ).then(\n      () => {\n        this.setState({fillVal:this.state.fullVal.filter(data => (\n          this.state.stPage < data.id && \n          data.id <= (this.state.edPage+this.state.perpage)\n        ))});\n        this.stopLoading();\n        console.log(\n          this.state.stPage,\n          this.state.edPage\n        );\n      }\n    );\n  }\n\n  nextPage(){\n    const allpage = this.state.fullVal.length;\n    const setEd = allpage-this.state.perpage;\n    if((this.state.edPage+this.state.perpage) < allpage){\n      this.setState({stPage:this.state.stPage+this.state.perpage,edPage:this.state.edPage+this.state.perpage});\n      this.reload();\n    }else{\n      this.setState({\n        stPage:allpage-this.state.perpage,\n        edPage:setEd\n      });\n    }\n  }\n\n  lastPage(){\n    const allpage = this.state.fullVal.length;\n    const setEd = allpage-this.state.perpage;\n    this.setState({\n      stPage:allpage-this.state.perpage,\n      edPage:setEd\n    });\n    this.reload();\n  }\n\n  prevPage(){\n    if((this.state.stPage-this.state.perpage) >= 0){\n      this.setState({stPage:this.state.stPage-this.state.perpage,edPage:this.state.edPage-this.state.perpage});\n      this.reload();\n    }else{\n      this.setState({\n        stPage:0,\n        edPage:0,\n      })\n      this.reload();\n    }\n  }\n\n  firstPage(){\n    this.setState({\n      stPage:0,\n      edPage:0,\n    })\n    this.reload();\n  }\n\n  backToTop(){\n    document.body.scrollTop = 0;\n    document.documentElement.scrollTop = 0;\n  }\n\n  perpageChange = e => {\n    const allPage = this.state.fullVal.length;\n    const maxVal = parseInt(e.target.value)+this.state.edPage;\n    if(maxVal > allPage){\n      this.setState({\n        perpage:parseInt(e.target.value),\n        edPage: allPage,\n        stPage: allPage-parseInt(e.target.value)\n      });\n      this.reload();\n    }else{\n      this.setState({\n        perpage:parseInt(e.target.value)\n      });\n      this.reload();\n    }\n\n  }\n  isSelected = e => {\n    return e === this.state.perpage;\n  }\n\n  componentDidMount(){\n    this.reload();\n  }\n\n  render() {\n    return (\n      <Fragment>\n        {this.state.loading ?\n        <div className=\"bg-dark d-flex justify-content-center align-items-center text-light\" style={{width:'100vw',height:\"100vh\"}}>\n          <Loader type=\"cylon\" color=\"#fff\" height={'20%'} width={'20%'} title=\"loading\" />\n        </div>\n        :\n        <div>\n          <div className=\"topNav bg-dark shadow fixed-top col\">\n          <button className=\"btn btn btn-dark\" onClick={this.toggleShow}>\n            <b>menu <i className={this.state.isClickMenu ? \"fas fa-chevron-right\":\"fas fa-chevron-left\"} /></b>\n          </button>\n        </div>\n\n        <span className={this.state.show ? 'show' : 'notShow'}>\n          <div className=\"sideMenu list-group bg-secondary text-white shadow\">\n            <span className=\"btn btn-secondary btn-lg\"><b>Today News</b></span>\n            <span className=\"btn btn-secondary btn-lg\"><b>Technology</b></span>\n            <span className=\"btn btn-secondary btn-lg\"><b>Sport</b></span>\n            <span className=\"btn btn-secondary btn-lg\"><b>Space</b></span>\n            <span className=\"btn btn-secondary btn-lg\"><b>Art</b></span>\n            <span className=\"btn btn-secondary btn-lg\"><b>About</b></span>\n          </div>\n        </span>\n\n        <div className=\"container-fluid content\">\n\n          <div className=\"row justify-content-center\">\n              <span className=\"paper shadow-sm col-sm col-lg-8\">\n                <div className=\"input-group mb-3\">\n                  <div className=\"input-group-prepend\">\n                    <label className=\"input-group-text\"><b>Show</b></label>\n                  </div>\n                  <select className=\"custom-select\" onChange={this.perpageChange}>\n                    {this.state.perPageNo.map((data,key) =>\n                    <option value={data} selected={this.isSelected(data)} key={key}>{data}</option>\n                    )}\n                  </select>\n                </div>\n              </span>\n          </div>\n\n          {this.state.fillVal.map((data,key) => \n            <span className=\"row justify-content-center\" key={key}>\n              <Paper title={data.title} content={data.body} id={data.id} />\n            </span>  \n          )}\n          <div className=\"row justify-content-center\">\n              <span className=\"paper col shadow-sm col-sm col-lg-8\">\n                <span>\n                  <button onClick={this.firstPage} className=\"btn-light btn\"><b><i className=\"fas fa-chevron-left\" /><i className=\"fas fa-chevron-left\" /> Frist</b></button>{' '}\n                  <button onClick={this.prevPage} className=\"btn-light btn\"><b><i className=\"fas fa-chevron-left\" /> Prev</b></button>\n                </span>\n                <span style={{float:\"right\"}}>\n                  <button onClick={this.nextPage} className=\"btn-light btn\"><b>Next <i className=\"fas fa-chevron-right\"/></b></button>{' '}\n                  <button onClick={this.lastPage} className=\"btn-light btn\"><b>Last <i className=\"fas fa-chevron-right\"/><i className=\"fas fa-chevron-right\"/></b></button>\n                </span>\n              </span>\n          </div>\n        </div>\n        <button onClick={this.backToTop} id=\"topBut\" className=\"topBut btn btn-sm btn-dark notShow\">TOP</button>\n        </div>\n        }\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}